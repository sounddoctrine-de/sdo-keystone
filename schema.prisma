// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Speaker {
  id                 String  @id @default(cuid())
  speakerName        String  @unique @default("")
  from_Video_speaker Video[] @relation("Video_speaker")
}

model Language {
  id                  String  @id @default(cuid())
  languageCode        String  @unique @default("")
  name                String  @unique @default("")
  sourceCountryFlag   String  @default("")
  from_Video_language Video[] @relation("Video_language")
}

model ChannelType {
  id                       String    @id @default(cuid())
  channelTypeCode          String    @unique @default("")
  from_Channel_channelType Channel[] @relation("Channel_channelType")
}

model Channel {
  id              String       @id @default(cuid())
  channelName     String       @unique @default("")
  channelType     ChannelType? @relation("Channel_channelType", fields: [channelTypeId], references: [id])
  channelTypeId   String?      @map("channelType")
  locationLat     String       @default("")
  locationLong    String       @default("")
  regionCode      String       @default("")
  shortIdentifier String       @unique @default("")
  websiteUrl      String       @default("")
  addressText     String       @default("")
  videosInChannel Video[]      @relation("Video_channel")

  @@index([channelTypeId])
}

model User {
  id             String  @id @default(uuid()) @postgresql.Uuid
  userUuid       String  @unique @default("")
  userEmail      String  @default("")
  likedVideos    Video[] @relation("User_likedVideos")
  dislikedVideos Video[] @relation("User_dislikedVideos")
}

model VideoType {
  id                   String  @id @default(cuid())
  videoTypeName        String  @unique @default("")
  from_Video_videoType Video[] @relation("Video_videoType")
}

model Video {
  id                       String       @id @default(cuid())
  title                    String       @unique @default("")
  description              String       @default("")
  datePublished            DateTime     @postgresql.Date
  channel                  Channel?     @relation("Video_channel", fields: [channelId], references: [id])
  channelId                String?      @map("channel")
  speaker                  Speaker[]    @relation("Video_speaker")
  language                 Language?    @relation("Video_language", fields: [languageId], references: [id])
  languageId               String?      @map("language")
  videoType                VideoType?   @relation("Video_videoType", fields: [videoTypeId], references: [id])
  videoTypeId              String?      @map("videoType")
  videoStatus              VideoStatus? @relation("Video_videoStatus", fields: [videoStatusId], references: [id])
  videoStatusId            String?      @map("videoStatus")
  gcpStorageFileName       String       @default("")
  gcpStorageBucketName     String       @default("")
  bunnyStorageHlsUrl       String       @default("")
  thumbnailUrl             String       @default("")
  urlSlug                  String       @default("")
  from_User_likedVideos    User[]       @relation("User_likedVideos")
  from_User_dislikedVideos User[]       @relation("User_dislikedVideos")

  @@index([channelId])
  @@index([languageId])
  @@index([videoTypeId])
  @@index([videoStatusId])
}

model VideoStatus {
  id                     String  @id @default(cuid())
  videoStatusName        String  @unique @default("")
  from_Video_videoStatus Video[] @relation("Video_videoStatus")
}

model Admin {
  id       String        @id @default(cuid())
  name     String        @default("")
  email    String        @unique @default("")
  password String
  type     AdminTypeType @default(super_moderator)
}

enum AdminTypeType {
  super_admin
  super_moderator
}
