# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Speaker {
  id: ID!
  speakerName: String
}

input SpeakerWhereUniqueInput {
  id: ID
  speakerName: String
}

input SpeakerWhereInput {
  AND: [SpeakerWhereInput!]
  OR: [SpeakerWhereInput!]
  NOT: [SpeakerWhereInput!]
  id: IDFilter
  speakerName: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input SpeakerOrderByInput {
  id: OrderDirection
  speakerName: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SpeakerUpdateInput {
  speakerName: String
}

input SpeakerUpdateArgs {
  where: SpeakerWhereUniqueInput!
  data: SpeakerUpdateInput!
}

input SpeakerCreateInput {
  speakerName: String
}

type Language {
  id: ID!
  languageCode: String
  name: String
  sourceCountryFlag: String
}

input LanguageWhereUniqueInput {
  id: ID
  languageCode: String
  name: String
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  id: IDFilter
  languageCode: StringFilter
  name: StringFilter
  sourceCountryFlag: StringFilter
}

input LanguageOrderByInput {
  id: OrderDirection
  languageCode: OrderDirection
  name: OrderDirection
  sourceCountryFlag: OrderDirection
}

input LanguageUpdateInput {
  languageCode: String
  name: String
  sourceCountryFlag: String
}

input LanguageUpdateArgs {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateInput!
}

input LanguageCreateInput {
  languageCode: String
  name: String
  sourceCountryFlag: String
}

type ChannelType {
  id: ID!
  channelTypeCode: String
}

input ChannelTypeWhereUniqueInput {
  id: ID
  channelTypeCode: String
}

input ChannelTypeWhereInput {
  AND: [ChannelTypeWhereInput!]
  OR: [ChannelTypeWhereInput!]
  NOT: [ChannelTypeWhereInput!]
  id: IDFilter
  channelTypeCode: StringFilter
}

input ChannelTypeOrderByInput {
  id: OrderDirection
  channelTypeCode: OrderDirection
}

input ChannelTypeUpdateInput {
  channelTypeCode: String
}

input ChannelTypeUpdateArgs {
  where: ChannelTypeWhereUniqueInput!
  data: ChannelTypeUpdateInput!
}

input ChannelTypeCreateInput {
  channelTypeCode: String
}

type Channel {
  id: ID!
  channelName: String
  channelType: ChannelType
  locationLat: String
  locationLong: String
  regionCode: String
  shortIdentifier: String
  websiteUrl: String
  addressText: String
  videosInChannel(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  videosInChannelCount(where: VideoWhereInput! = {}): Int
}

input ChannelWhereUniqueInput {
  id: ID
  channelName: String
  shortIdentifier: String
}

input ChannelWhereInput {
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
  id: IDFilter
  channelName: StringFilter
  channelType: ChannelTypeWhereInput
  locationLat: StringFilter
  locationLong: StringFilter
  regionCode: StringFilter
  shortIdentifier: StringFilter
  websiteUrl: StringFilter
  addressText: StringFilter
  videosInChannel: VideoManyRelationFilter
}

input VideoManyRelationFilter {
  every: VideoWhereInput
  some: VideoWhereInput
  none: VideoWhereInput
}

input ChannelOrderByInput {
  id: OrderDirection
  channelName: OrderDirection
  locationLat: OrderDirection
  locationLong: OrderDirection
  regionCode: OrderDirection
  shortIdentifier: OrderDirection
  websiteUrl: OrderDirection
  addressText: OrderDirection
}

input ChannelUpdateInput {
  channelName: String
  channelType: ChannelTypeRelateToOneForUpdateInput
  locationLat: String
  locationLong: String
  regionCode: String
  shortIdentifier: String
  websiteUrl: String
  addressText: String
  videosInChannel: VideoRelateToManyForUpdateInput
}

input ChannelTypeRelateToOneForUpdateInput {
  create: ChannelTypeCreateInput
  connect: ChannelTypeWhereUniqueInput
  disconnect: Boolean
}

input VideoRelateToManyForUpdateInput {
  disconnect: [VideoWhereUniqueInput!]
  set: [VideoWhereUniqueInput!]
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
}

input ChannelUpdateArgs {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateInput!
}

input ChannelCreateInput {
  channelName: String
  channelType: ChannelTypeRelateToOneForCreateInput
  locationLat: String
  locationLong: String
  regionCode: String
  shortIdentifier: String
  websiteUrl: String
  addressText: String
  videosInChannel: VideoRelateToManyForCreateInput
}

input ChannelTypeRelateToOneForCreateInput {
  create: ChannelTypeCreateInput
  connect: ChannelTypeWhereUniqueInput
}

input VideoRelateToManyForCreateInput {
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
}

type User {
  id: ID!
  userUuid: String
  userEmail: String
  likedVideos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  likedVideosCount(where: VideoWhereInput! = {}): Int
  dislikedVideos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  dislikedVideosCount(where: VideoWhereInput! = {}): Int
}

input UserWhereUniqueInput {
  id: ID
  userUuid: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  userUuid: StringFilter
  userEmail: StringFilter
  likedVideos: VideoManyRelationFilter
  dislikedVideos: VideoManyRelationFilter
}

input UserOrderByInput {
  id: OrderDirection
  userUuid: OrderDirection
  userEmail: OrderDirection
}

input UserUpdateInput {
  userUuid: String
  userEmail: String
  likedVideos: VideoRelateToManyForUpdateInput
  dislikedVideos: VideoRelateToManyForUpdateInput
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  userUuid: String
  userEmail: String
  likedVideos: VideoRelateToManyForCreateInput
  dislikedVideos: VideoRelateToManyForCreateInput
}

type VideoType {
  id: ID!
  videoTypeName: String
}

input VideoTypeWhereUniqueInput {
  id: ID
  videoTypeName: String
}

input VideoTypeWhereInput {
  AND: [VideoTypeWhereInput!]
  OR: [VideoTypeWhereInput!]
  NOT: [VideoTypeWhereInput!]
  id: IDFilter
  videoTypeName: StringFilter
}

input VideoTypeOrderByInput {
  id: OrderDirection
  videoTypeName: OrderDirection
}

input VideoTypeUpdateInput {
  videoTypeName: String
}

input VideoTypeUpdateArgs {
  where: VideoTypeWhereUniqueInput!
  data: VideoTypeUpdateInput!
}

input VideoTypeCreateInput {
  videoTypeName: String
}

type Video {
  id: ID!
  title: String
  description: String
  datePublished: CalendarDay
  channel: Channel
  speaker(where: SpeakerWhereInput! = {}, orderBy: [SpeakerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpeakerWhereUniqueInput): [Speaker!]
  speakerCount(where: SpeakerWhereInput! = {}): Int
  language: Language
  videoType: VideoType
  videoStatus: VideoStatus
  gcpStorageFileName: String
  gcpStorageBucketName: String
  bunnyStorageHlsUrl: String
  thumbnailUrl: String
  urlSlug: String
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input VideoWhereUniqueInput {
  id: ID
  title: String
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  datePublished: CalendarDayFilter
  channel: ChannelWhereInput
  speaker: SpeakerManyRelationFilter
  language: LanguageWhereInput
  videoType: VideoTypeWhereInput
  videoStatus: VideoStatusWhereInput
  gcpStorageFileName: StringFilter
  gcpStorageBucketName: StringFilter
  bunnyStorageHlsUrl: StringFilter
  thumbnailUrl: StringFilter
  urlSlug: StringFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input SpeakerManyRelationFilter {
  every: SpeakerWhereInput
  some: SpeakerWhereInput
  none: SpeakerWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  datePublished: OrderDirection
  gcpStorageFileName: OrderDirection
  gcpStorageBucketName: OrderDirection
  bunnyStorageHlsUrl: OrderDirection
  thumbnailUrl: OrderDirection
  urlSlug: OrderDirection
}

input VideoUpdateInput {
  title: String
  description: String
  datePublished: CalendarDay
  channel: ChannelRelateToOneForUpdateInput
  speaker: SpeakerRelateToManyForUpdateInput
  language: LanguageRelateToOneForUpdateInput
  videoType: VideoTypeRelateToOneForUpdateInput
  videoStatus: VideoStatusRelateToOneForUpdateInput
  gcpStorageFileName: String
  gcpStorageBucketName: String
  bunnyStorageHlsUrl: String
  thumbnailUrl: String
  urlSlug: String
}

input ChannelRelateToOneForUpdateInput {
  create: ChannelCreateInput
  connect: ChannelWhereUniqueInput
  disconnect: Boolean
}

input SpeakerRelateToManyForUpdateInput {
  disconnect: [SpeakerWhereUniqueInput!]
  set: [SpeakerWhereUniqueInput!]
  create: [SpeakerCreateInput!]
  connect: [SpeakerWhereUniqueInput!]
}

input LanguageRelateToOneForUpdateInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
  disconnect: Boolean
}

input VideoTypeRelateToOneForUpdateInput {
  create: VideoTypeCreateInput
  connect: VideoTypeWhereUniqueInput
  disconnect: Boolean
}

input VideoStatusRelateToOneForUpdateInput {
  create: VideoStatusCreateInput
  connect: VideoStatusWhereUniqueInput
  disconnect: Boolean
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  title: String
  description: String
  datePublished: CalendarDay
  channel: ChannelRelateToOneForCreateInput
  speaker: SpeakerRelateToManyForCreateInput
  language: LanguageRelateToOneForCreateInput
  videoType: VideoTypeRelateToOneForCreateInput
  videoStatus: VideoStatusRelateToOneForCreateInput
  gcpStorageFileName: String
  gcpStorageBucketName: String
  bunnyStorageHlsUrl: String
  thumbnailUrl: String
  urlSlug: String
}

input ChannelRelateToOneForCreateInput {
  create: ChannelCreateInput
  connect: ChannelWhereUniqueInput
}

input SpeakerRelateToManyForCreateInput {
  create: [SpeakerCreateInput!]
  connect: [SpeakerWhereUniqueInput!]
}

input LanguageRelateToOneForCreateInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

input VideoTypeRelateToOneForCreateInput {
  create: VideoTypeCreateInput
  connect: VideoTypeWhereUniqueInput
}

input VideoStatusRelateToOneForCreateInput {
  create: VideoStatusCreateInput
  connect: VideoStatusWhereUniqueInput
}

type VideoStatus {
  id: ID!
  videoStatusName: String
}

input VideoStatusWhereUniqueInput {
  id: ID
  videoStatusName: String
}

input VideoStatusWhereInput {
  AND: [VideoStatusWhereInput!]
  OR: [VideoStatusWhereInput!]
  NOT: [VideoStatusWhereInput!]
  id: IDFilter
  videoStatusName: StringFilter
}

input VideoStatusOrderByInput {
  id: OrderDirection
  videoStatusName: OrderDirection
}

input VideoStatusUpdateInput {
  videoStatusName: String
}

input VideoStatusUpdateArgs {
  where: VideoStatusWhereUniqueInput!
  data: VideoStatusUpdateInput!
}

input VideoStatusCreateInput {
  videoStatusName: String
}

type Admin {
  id: ID!
  name: String
  email: String
  password: PasswordState
  type: AdminTypeType
}

type PasswordState {
  isSet: Boolean!
}

enum AdminTypeType {
  super_admin
  super_moderator
}

input AdminWhereUniqueInput {
  id: ID
  email: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  type: AdminTypeTypeNullableFilter
}

input AdminTypeTypeNullableFilter {
  equals: AdminTypeType
  in: [AdminTypeType!]
  notIn: [AdminTypeType!]
  not: AdminTypeTypeNullableFilter
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  type: OrderDirection
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
  type: AdminTypeType
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  email: String
  password: String
  type: AdminTypeType
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createSpeaker(data: SpeakerCreateInput!): Speaker
  createSpeakers(data: [SpeakerCreateInput!]!): [Speaker]
  updateSpeaker(where: SpeakerWhereUniqueInput!, data: SpeakerUpdateInput!): Speaker
  updateSpeakers(data: [SpeakerUpdateArgs!]!): [Speaker]
  deleteSpeaker(where: SpeakerWhereUniqueInput!): Speaker
  deleteSpeakers(where: [SpeakerWhereUniqueInput!]!): [Speaker]
  createLanguage(data: LanguageCreateInput!): Language
  createLanguages(data: [LanguageCreateInput!]!): [Language]
  updateLanguage(where: LanguageWhereUniqueInput!, data: LanguageUpdateInput!): Language
  updateLanguages(data: [LanguageUpdateArgs!]!): [Language]
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteLanguages(where: [LanguageWhereUniqueInput!]!): [Language]
  createChannelType(data: ChannelTypeCreateInput!): ChannelType
  createChannelTypes(data: [ChannelTypeCreateInput!]!): [ChannelType]
  updateChannelType(where: ChannelTypeWhereUniqueInput!, data: ChannelTypeUpdateInput!): ChannelType
  updateChannelTypes(data: [ChannelTypeUpdateArgs!]!): [ChannelType]
  deleteChannelType(where: ChannelTypeWhereUniqueInput!): ChannelType
  deleteChannelTypes(where: [ChannelTypeWhereUniqueInput!]!): [ChannelType]
  createChannel(data: ChannelCreateInput!): Channel
  createChannels(data: [ChannelCreateInput!]!): [Channel]
  updateChannel(where: ChannelWhereUniqueInput!, data: ChannelUpdateInput!): Channel
  updateChannels(data: [ChannelUpdateArgs!]!): [Channel]
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteChannels(where: [ChannelWhereUniqueInput!]!): [Channel]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createVideoType(data: VideoTypeCreateInput!): VideoType
  createVideoTypes(data: [VideoTypeCreateInput!]!): [VideoType]
  updateVideoType(where: VideoTypeWhereUniqueInput!, data: VideoTypeUpdateInput!): VideoType
  updateVideoTypes(data: [VideoTypeUpdateArgs!]!): [VideoType]
  deleteVideoType(where: VideoTypeWhereUniqueInput!): VideoType
  deleteVideoTypes(where: [VideoTypeWhereUniqueInput!]!): [VideoType]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createVideoStatus(data: VideoStatusCreateInput!): VideoStatus
  createVideoStatuses(data: [VideoStatusCreateInput!]!): [VideoStatus]
  updateVideoStatus(where: VideoStatusWhereUniqueInput!, data: VideoStatusUpdateInput!): VideoStatus
  updateVideoStatuses(data: [VideoStatusUpdateArgs!]!): [VideoStatus]
  deleteVideoStatus(where: VideoStatusWhereUniqueInput!): VideoStatus
  deleteVideoStatuses(where: [VideoStatusWhereUniqueInput!]!): [VideoStatus]
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  endSession: Boolean!
  authenticateAdminWithPassword(email: String!, password: String!): AdminAuthenticationWithPasswordResult
}

union AdminAuthenticationWithPasswordResult = AdminAuthenticationWithPasswordSuccess | AdminAuthenticationWithPasswordFailure

type AdminAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Admin!
}

type AdminAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  speakers(where: SpeakerWhereInput! = {}, orderBy: [SpeakerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpeakerWhereUniqueInput): [Speaker!]
  speaker(where: SpeakerWhereUniqueInput!): Speaker
  speakersCount(where: SpeakerWhereInput! = {}): Int
  languages(where: LanguageWhereInput! = {}, orderBy: [LanguageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageWhereUniqueInput): [Language!]
  language(where: LanguageWhereUniqueInput!): Language
  languagesCount(where: LanguageWhereInput! = {}): Int
  channelTypes(where: ChannelTypeWhereInput! = {}, orderBy: [ChannelTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChannelTypeWhereUniqueInput): [ChannelType!]
  channelType(where: ChannelTypeWhereUniqueInput!): ChannelType
  channelTypesCount(where: ChannelTypeWhereInput! = {}): Int
  channels(where: ChannelWhereInput! = {}, orderBy: [ChannelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChannelWhereUniqueInput): [Channel!]
  channel(where: ChannelWhereUniqueInput!): Channel
  channelsCount(where: ChannelWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  videoTypes(where: VideoTypeWhereInput! = {}, orderBy: [VideoTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoTypeWhereUniqueInput): [VideoType!]
  videoType(where: VideoTypeWhereUniqueInput!): VideoType
  videoTypesCount(where: VideoTypeWhereInput! = {}): Int
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  videoStatuses(where: VideoStatusWhereInput! = {}, orderBy: [VideoStatusOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoStatusWhereUniqueInput): [VideoStatus!]
  videoStatus(where: VideoStatusWhereUniqueInput!): VideoStatus
  videoStatusesCount(where: VideoStatusWhereInput! = {}): Int
  admins(where: AdminWhereInput! = {}, orderBy: [AdminOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdminWhereUniqueInput): [Admin!]
  admin(where: AdminWhereUniqueInput!): Admin
  adminsCount(where: AdminWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Admin

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
